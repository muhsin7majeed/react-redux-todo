{"version":3,"sources":["components/Todo.js","components/AddTodo.js","components/Todos.js","components/reducers/todoReducer.js","App.js","serviceWorker.js","index.js"],"names":["connect","props","className","style","todo","isComplete","opacity","textDecoration","index","onClick","dispatch","type","id","label","message","time","useState","dataChange","setDataChange","onSubmit","e","preventDefault","newTodo","uuid","DT","payload","required","name","placeholder","value","onChange","target","Date","now","status","color","Test","todoCount","this","todos","length","map","key","todoStatus","Component","state","initialState","reducerTodo","actions","push","filter","store","createStore","todoReducer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1cd79b40.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nfunction Todo(props) {\n  return (\n    <li\n      className=\"eachTodo\"\n      //   Style based on Completion\n      style={\n        props.todo.isComplete\n          ? { opacity: \".2\", textDecoration: \"line-through\" }\n          : { opacity: \"1\", textDecoration: \"none\" }\n      }\n    >\n      <small className=\"todoNum\">{props.index}</small>\n      <div\n        className=\"todoHeads\"\n        onClick={() => {\n          props.dispatch({ type: \"COMPLETE_TODO\", id: props.todo.id });\n        }}\n      >\n        <h3>{props.todo.label}</h3>\n        <button className=\"todoComplete\">\n          <i className=\"fas fa-check-circle\" />\n        </button>\n      </div>\n      <hr /> <p>{props.todo.message}</p>\n      <small className=\"todoTime\">added on : {props.todo.time}</small>\n      <button\n        className=\"deleteBtn\"\n        onClick={() =>\n          props.dispatch({ type: \"DELETE_TODO\", id: props.todo.id })\n        }\n      >\n        <i className=\"fas fa-trash-alt\"></i>\n      </button>\n    </li>\n  );\n}\nexport default connect(\n  null,\n  null\n)(Todo);\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport DT from \"date-time\";\nimport uuid from \"uuid\";\n\nfunction AddTodo(props) {\n  // onchange\n  const [dataChange, setDataChange] = useState({\n    label: \"\",\n    message: \"\"\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!dataChange.label) {\n    } else {\n      const newTodo = {\n        id: uuid(),\n        time: DT(),\n        label: dataChange.label,\n        message: dataChange.message\n      };\n      props.dispatch({ type: \"ADD_TODO\", payload: newTodo });\n      setDataChange({ label: \"\", message: \"\" });\n    }\n  };\n  return (\n    <form className=\"addTodo\" onSubmit={handleSubmit}>\n      <h1>New Todo</h1>\n      <input\n        required\n        name=\"label\"\n        placeholder=\"add a label\"\n        value={dataChange.label}\n        onChange={e =>\n          setDataChange({\n            ...dataChange,\n            [e.target.name]: e.target.value,\n            time: Date.now()\n          })\n        }\n      />\n      <textarea\n        name=\"message\"\n        placeholder=\"add a message\"\n        value={dataChange.message}\n        onChange={e =>\n          setDataChange({\n            ...dataChange,\n            [e.target.name]: e.target.value,\n            time: Date.now()\n          })\n        }\n      />\n      <button>\n        <i className=\"fas fa-plus\" />\n      </button>\n\n      <small\n        style={props.status.status ? { color: \"green\" } : { color: \"red\" }}\n      >\n        {props.status.message}\n      </small>\n    </form>\n  );\n}\n\nexport default connect(\n  null,\n  null\n)(AddTodo);\n","import React, { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\nimport Todo from \"./Todo\";\nimport AddTodo from \"./AddTodo\";\n\nclass Test extends Component {\n  render() {\n    const todoCount = this.props.todos.length;\n    const todo = this.props.todos.map((todo, index) => (\n      <Todo key={todo.id} todo={todo} index={index + 1} />\n    ));\n    return (\n      <>\n        <h2 className=\"mainHeader\">Todo List App with React & Redux</h2>\n        <AddTodo status={this.props.todoStatus} />\n        <div className=\"todos\">\n          <h1 className=\"todosHead\">\n            Todos <span>{todoCount}</span>\n          </h1>\n          <ul>{todo}</ul>\n        </div>\n      </>\n    );\n  }\n}\n\n// Gets state required for the component\nconst mapStateToProps = state => {\n  return {\n    todos: state.todos,\n    todoStatus: state.todoStatus\n  };\n};\n\n// Connecting State to this Component\nexport default connect(mapStateToProps)(Test);\n","// Setting Initial State\nconst initialState = {\n  todoStatus: {\n    status: null,\n    message: \"\"\n  },\n  todos: [\n    {\n      id: 1,\n      label: \"Buy Milk\",\n      message: \"buy milk duh!\",\n      time: \"2-4-2001\",\n      isComplete: false\n    },\n    {\n      id: 2,\n      label: \"Buy a Cow\",\n      message: \"just a thought\",\n      time: \"3-4-2001\",\n      isComplete: false\n    },\n    {\n      id: 3,\n      label: \"pizzaa!!\",\n      message: \"yummyy\",\n      time: \"5-4-2003\",\n      isComplete: true\n    }\n  ]\n};\n\n// Setting Reducers => takes in initialState, and actions\nconst reducerTodo = (state = initialState, actions) => {\n  // returns changed state by \"switching action.type\"\n  switch (actions.type) {\n    case \"ADD_TODO\":\n      const newTodo = [...state.todos];\n      // pushes new entry to array\n      newTodo.push(actions.payload);\n      return {\n        todoStatus: {\n          status: true,\n          message: \"New todo created..\"\n        },\n        todos: newTodo\n      };\n    case \"DELETE_TODO\":\n      return {\n        todoStatus: {\n          status: false,\n          message: \"Todo deleted..\"\n        },\n        // filters array to remove selected ID\n        todos: state.todos.filter(todo => todo.id !== actions.id)\n      };\n    case \"COMPLETE_TODO\":\n      return {\n        todoStatus: state.todoStatus,\n        // changes isComplete to toggle completed arrays\n        todos: state.todos.map(todo =>\n          todo.id === actions.id\n            ? { ...todo, isComplete: !todo.isComplete }\n            : todo\n        )\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducerTodo;\n","import React from \"react\";\nimport \"./App.css\";\nimport Test from \"./components/Todos\";\n\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\n\n// importing reducers, usually combined reducer\nimport todoReducer from \"./components/reducers/todoReducer\";\nconst store = createStore(todoReducer);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Test />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}